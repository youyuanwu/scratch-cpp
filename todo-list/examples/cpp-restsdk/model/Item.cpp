/**
 * A To Do list application
 * The product of a tutorial on goswagger.io
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Item.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Item::Item()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Completed = false;
    m_CompletedIsSet = false;
}

Item::~Item()
{
}

void Item::validate()
{
    // TODO: implement validation
}

web::json::value Item::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_CompletedIsSet)
    {
        val[utility::conversions::to_string_t("completed")] = ModelBase::toJson(m_Completed);
    }

    return val;
}

bool Item::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("completed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("completed"));
        if(!fieldValue.is_null())
        {
            bool refVal_completed;
            ok &= ModelBase::fromJson(fieldValue, refVal_completed);
            setCompleted(refVal_completed);
        }
    }
    return ok;
}

void Item::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_CompletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("completed"), m_Completed));
    }
}

bool Item::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("completed")))
    {
        bool refVal_completed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("completed")), refVal_completed );
        setCompleted(refVal_completed);
    }
    return ok;
}

int64_t Item::getId() const
{
    return m_Id;
}

void Item::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Item::idIsSet() const
{
    return m_IdIsSet;
}

void Item::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Item::getDescription() const
{
    return m_Description;
}

void Item::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Item::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Item::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool Item::isCompleted() const
{
    return m_Completed;
}

void Item::setCompleted(bool value)
{
    m_Completed = value;
    m_CompletedIsSet = true;
}

bool Item::completedIsSet() const
{
    return m_CompletedIsSet;
}

void Item::unsetCompleted()
{
    m_CompletedIsSet = false;
}
}
}
}
}


