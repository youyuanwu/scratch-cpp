/**
 * A To Do list application
 * The product of a tutorial on goswagger.io
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITodosApi_H
#define OAI_OAITodosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIError.h"
#include "OAIItem.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITodosApi : public QObject {
    Q_OBJECT

public:
    OAITodosApi(const int timeOut = 0);
    ~OAITodosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  body OAIItem [optional]
    */
    void addOne(const ::OpenAPI::OptionalParam<OAIItem> &body = ::OpenAPI::OptionalParam<OAIItem>());

    /**
    * @param[in]  id qint64 [required]
    */
    void destroyOne(const qint64 &id);

    /**
    * @param[in]  since qint64 [optional]
    * @param[in]  limit qint32 [optional]
    */
    void findTodos(const ::OpenAPI::OptionalParam<qint64> &since = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAIItem [optional]
    */
    void updateOne(const qint64 &id, const ::OpenAPI::OptionalParam<OAIItem> &body = ::OpenAPI::OptionalParam<OAIItem>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void addOneCallback(OAIHttpRequestWorker *worker);
    void destroyOneCallback(OAIHttpRequestWorker *worker);
    void findTodosCallback(OAIHttpRequestWorker *worker);
    void updateOneCallback(OAIHttpRequestWorker *worker);

signals:

    void addOneSignal(OAIItem summary);
    void destroyOneSignal();
    void findTodosSignal(QList<OAIItem> summary);
    void updateOneSignal(OAIItem summary);

    void addOneSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);
    void destroyOneSignalFull(OAIHttpRequestWorker *worker);
    void findTodosSignalFull(OAIHttpRequestWorker *worker, QList<OAIItem> summary);
    void updateOneSignalFull(OAIHttpRequestWorker *worker, OAIItem summary);

    void addOneSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyOneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void findTodosSignalE(QList<OAIItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOneSignalE(OAIItem summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addOneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyOneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findTodosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
